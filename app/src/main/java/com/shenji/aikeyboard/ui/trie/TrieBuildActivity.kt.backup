package com.shenji.aikeyboard.ui.trie

import android.os.Bundle
import android.view.MenuItem
import android.view.View
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.cardview.widget.CardView
import androidx.lifecycle.lifecycleScope
import com.shenji.aikeyboard.R
import com.shenji.aikeyboard.data.trie.TrieBuilder
import com.shenji.aikeyboard.data.trie.TrieManager
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import timber.log.Timber
import java.io.File
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import androidx.appcompat.app.AlertDialog
import android.widget.ScrollView
import android.content.ClipData
import android.content.ClipboardManager
import android.content.Context
import android.view.Menu
import android.view.MenuInflater

/**
 * Trie树构建Activity - 支持所有9种词典类型
 * 用于构建和管理拼音Trie树索引
 */
class TrieBuildActivity : AppCompatActivity() {
    
    // 主要UI元素
    private lateinit var scrollView: ScrollView
    private lateinit var mainContainer: LinearLayout
    private lateinit var memoryCard: CardView
    private lateinit var memoryInfoText: TextView
    private lateinit var prebuiltStatusCard: CardView
    private lateinit var prebuiltStatusText: TextView
    
    // 词典卡片映射
    private val dictCards = mutableMapOf<TrieBuilder.TrieType, DictCard>()
    
    // Trie树构建器
    private lateinit var trieBuilder: TrieBuilder
    
    // Trie树管理器
    private val trieManager = TrieManager.instance
    
    // 日志记录
    private val operationLogs = mutableListOf<String>()
    
    // 词典卡片数据类
    data class DictCard(
        val card: CardView,
        val nameText: TextView,
        val statusText: TextView,
        val fileInfo: TextView,
        val progress: ProgressBar,
        val progressText: TextView,
        val buildButton: Button,
        val exportButton: Button,
        val loadButton: Button,
        val unloadButton: Button,
        val testButton: Button,
        val loadedStatus: TextView,
        val statsText: TextView
    )
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_trie_build)
        
        // 设置Toolbar
        val toolbar = findViewById<androidx.appcompat.widget.Toolbar>(R.id.toolbar)
        setSupportActionBar(toolbar)
        supportActionBar?.setDisplayHomeAsUpEnabled(true)
        supportActionBar?.title = "双Trie数据构建中心"
        
        // 初始化Trie树构建器
        trieBuilder = TrieBuilder(this)
        
        // 初始化UI组件
        initViews()
        
        // 创建预编译状态卡片
        createPrebuiltStatusCard()
        
        // 创建所有词典卡片
        createDictionaryCards()
        
        // 刷新状态
        refreshAllStatus()
        
        // 监听Trie内存加载状态
        observeTrieLoadingState()
        
        // 记录初始化日志
        addLog("Activity初始化完成")
    }
    
    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.trie_build_menu, menu)
        return true
    }
    
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.action_view_logs -> {
                showOperationLogs()
                true
            }
            R.id.action_diagnose_db -> {
                showDatabaseDiagnosis()
                true
            }
            android.R.id.home -> {
                finish()
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }
    
    /**
     * 初始化视图组件
     */
    private fun initViews() {
        scrollView = findViewById(R.id.scroll_view)
        mainContainer = findViewById(R.id.main_container)
        memoryCard = findViewById(R.id.memory_card)
        memoryInfoText = findViewById(R.id.memory_info_text)
    }
    
    /**
     * 创建预编译状态卡片
     */
    private fun createPrebuiltStatusCard() {
        // 创建预编译状态卡片
        prebuiltStatusCard = CardView(this).apply {
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            ).apply {
                setMargins(0, 0, 0, 32)
            }
            radius = 16f
            cardElevation = 8f
            setCardBackgroundColor(getColor(R.color.colorPrecompiledBackground))
        }
        
        val container = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(32, 24, 32, 24)
        }
        
        // 标题
        val titleText = TextView(this).apply {
            text = "当前预编译词典状态"
            textSize = 18f
            setTypeface(null, android.graphics.Typeface.BOLD)
            setTextColor(getColor(R.color.teal_700))
            setPadding(0, 0, 0, 16)
        }
        
        // 状态文本
        prebuiltStatusText = TextView(this).apply {
            text = "正在检查预编译词典状态..."
            textSize = 13f
            setTextColor(getColor(android.R.color.black))
            typeface = android.graphics.Typeface.MONOSPACE
        }
        
        container.addView(titleText)
        container.addView(prebuiltStatusText)
        prebuiltStatusCard.addView(container)
        
        // 将预编译状态卡片添加到主容器的顶部（在内存卡片之前）
        mainContainer.addView(prebuiltStatusCard, 0)
    }
    
    /**
     * 创建所有词典类型的卡片
     */
    private fun createDictionaryCards() {
        for (trieType in TrieBuilder.TrieType.values()) {
            val card = createDictionaryCard(trieType)
            dictCards[trieType] = card
            
            // 添加到主容器（在内存卡片之前插入）
            mainContainer.addView(card.card, mainContainer.childCount - 1)
        }
    }
    
    /**
     * 创建单个词典卡片
     */
    private fun createDictionaryCard(trieType: TrieBuilder.TrieType): DictCard {
        val displayName = getDisplayName(trieType)
        val description = getDescription(trieType)
        
        // 创建卡片布局
        val card = CardView(this).apply {
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            ).apply {
                setMargins(0, 0, 0, 32)
            }
            radius = 16f
            cardElevation = 8f
        }
        
        val container = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(32, 24, 32, 24)
        }
        
        // 标题
        val nameText = TextView(this).apply {
            text = displayName
            textSize = 18f
            setTypeface(null, android.graphics.Typeface.BOLD)
            setTextColor(getColor(R.color.teal_700))
        }
        
        // 描述
        val descText = TextView(this).apply {
            text = description
            textSize = 14f
            setTextColor(getColor(android.R.color.darker_gray))
            setPadding(0, 8, 0, 16)
        }
        
        // 状态信息
        val statusText = TextView(this).apply {
            text = "状态: 检查中..."
            textSize = 14f
        }
        
        val fileInfo = TextView(this).apply {
            text = "文件信息: 检查中..."
            textSize = 12f
            setTextColor(getColor(android.R.color.darker_gray))
            setPadding(0, 4, 0, 16)
        }
        
        // 进度条
        val progress = ProgressBar(this, null, android.R.attr.progressBarStyleHorizontal).apply {
            max = 100
            progress = 0
            visibility = View.INVISIBLE
        }
        
        val progressText = TextView(this).apply {
            text = ""
            textSize = 12f
            setTextColor(getColor(android.R.color.holo_blue_dark))
            visibility = View.INVISIBLE
            setPadding(0, 4, 0, 16)
        }
        
        // 按钮容器
        val buttonContainer = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            setPadding(0, 16, 0, 0)
        }
        
        val buildButton = Button(this).apply {
            text = "构建"
            setOnClickListener { showBuildConfigDialog(trieType) }
        }
        
        val exportButton = Button(this).apply {
            text = "导出"
            isEnabled = false
            setOnClickListener { exportTrie(trieType) }
        }
        
        // 内存管理按钮容器
        val memoryContainer = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            setPadding(0, 8, 0, 0)
        }
        
        val loadButton = Button(this).apply {
            text = "加载到内存"
            isEnabled = false
            setOnClickListener { loadTrieToMemory(trieType) }
        }
        
        val unloadButton = Button(this).apply {
            text = "卸载"
            isEnabled = false
            setOnClickListener { unloadTrie(trieType) }
        }
        
        val testButton = Button(this).apply {
            text = "测试"
            isEnabled = false
            setOnClickListener { testTrie(trieType) }
        }
        
        // 内存状态
        val loadedStatus = TextView(this).apply {
            text = "内存状态: 未加载"
            textSize = 12f
            setPadding(0, 8, 0, 4)
        }
        
        val statsText = TextView(this).apply {
            text = "统计信息: 无数据"
            textSize = 12f
            setTextColor(getColor(android.R.color.darker_gray))
        }
        
        // 组装布局
        buttonContainer.addView(buildButton)
        buttonContainer.addView(exportButton)
        
        memoryContainer.addView(loadButton)
        memoryContainer.addView(unloadButton)
        memoryContainer.addView(testButton)
        
        container.addView(nameText)
        container.addView(descText)
        container.addView(statusText)
        container.addView(fileInfo)
        container.addView(progress)
        container.addView(progressText)
        container.addView(buttonContainer)
        container.addView(memoryContainer)
        container.addView(loadedStatus)
        container.addView(statsText)
        
        card.addView(container)
        
        return DictCard(
            card = card,
            nameText = nameText,
            statusText = statusText,
            fileInfo = fileInfo,
            progress = progress,
            progressText = progressText,
            buildButton = buildButton,
            exportButton = exportButton,
            loadButton = loadButton,
            unloadButton = unloadButton,
            testButton = testButton,
            loadedStatus = loadedStatus,
            statsText = statsText
        )
    }
    
    /**
     * 显示构建配置对话框
     */
    private fun showBuildConfigDialog(trieType: TrieBuilder.TrieType) {
        val displayName = getDisplayName(trieType)
        
        // 创建对话框布局
        val scrollView = ScrollView(this)
        val container = LinearLayout(this).apply {
            orientation = LinearLayout.VERTICAL
            setPadding(32, 16, 32, 16)
        }
        scrollView.addView(container)
        
        // 批次大小设置
        container.addView(TextView(this).apply {
            text = "批次大小 (1000-20000):"
            textSize = 16f
            setTypeface(null, android.graphics.Typeface.BOLD)
        })
        
        val batchSizeSeekBar = SeekBar(this).apply {
            max = 190 // (20000-1000)/100
            progress = 90 // 默认10000
        }
        val batchSizeText = TextView(this).apply {
            text = "当前值: 10000"
            textSize = 14f
            setPadding(0, 8, 0, 16)
        }
        
        batchSizeSeekBar.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                val value = 1000 + progress * 100
                batchSizeText.text = "当前值: $value"
            }
            override fun onStartTrackingTouch(seekBar: SeekBar?) {}
            override fun onStopTrackingTouch(seekBar: SeekBar?) {}
        })
        
        container.addView(batchSizeSeekBar)
        container.addView(batchSizeText)
        
        // 工作线程设置
        container.addView(TextView(this).apply {
            text = "工作线程数 (1-8):"
            textSize = 16f
            setTypeface(null, android.graphics.Typeface.BOLD)
        })
        
        val workersSeekBar = SeekBar(this).apply {
            max = 7
            progress = 6 // 默认7
        }
        val workersText = TextView(this).apply {
            text = "当前值: 7"
            textSize = 14f
            setPadding(0, 8, 0, 16)
        }
        
        workersSeekBar.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
                val value = progress + 1
                workersText.text = "当前值: $value"
            }
            override fun onStartTrackingTouch(seekBar: SeekBar?) {}
            override fun onStopTrackingTouch(seekBar: SeekBar?) {}
        })
        
        container.addView(workersSeekBar)
        container.addView(workersText)
        
        // 词频过滤设置
        container.addView(TextView(this).apply {
            text = "词频过滤:"
            textSize = 16f
            setTypeface(null, android.graphics.Typeface.BOLD)
        })
        
        val frequencySpinner = Spinner(this).apply {
            setPadding(0, 8, 0, 16)
        }
        val frequencyOptions = TrieBuilder.FrequencyFilter.values()
        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, 
            frequencyOptions.map { it.displayName })
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        frequencySpinner.adapter = adapter
        
        container.addView(frequencySpinner)
        
        // 断点续传设置
        val breakpointCheckBox = CheckBox(this).apply {
            text = "启用断点续传"
            isChecked = true
            setPadding(0, 8, 0, 16)
        }
        container.addView(breakpointCheckBox)
        
        // 显示对话框
        AlertDialog.Builder(this)
            .setTitle("构建${displayName}配置")
            .setView(scrollView)
            .setPositiveButton("开始构建") { _, _ ->
                val batchSize = 1000 + batchSizeSeekBar.progress * 100
                val workers = workersSeekBar.progress + 1
                val frequencyFilter = frequencyOptions[frequencySpinner.selectedItemPosition]
                val enableBreakpoint = breakpointCheckBox.isChecked
                
                val config = TrieBuilder.TrieBuildConfig(
                    batchSize = batchSize,
                    numWorkers = workers,
                    frequencyFilter = frequencyFilter,
                    enableBreakpoint = enableBreakpoint
                )
                
                buildTrie(trieType, config)
            }
            .setNegativeButton("取消", null)
            .show()
    }
    
    /**
     * 构建Trie树
     */
    private fun buildTrie(trieType: TrieBuilder.TrieType, config: TrieBuilder.TrieBuildConfig) {
        val card = dictCards[trieType] ?: return
        val displayName = getDisplayName(trieType)
        
        // 记录开始构建日志
        addLog("开始构建${displayName} - 配置: 批次${config.batchSize}, 线程${config.numWorkers}, ${config.frequencyFilter.displayName}")
        
        // 显示进度条
        card.progress.visibility = View.VISIBLE
        card.progressText.visibility = View.VISIBLE
        card.progress.progress = 0
        
        // 禁用构建按钮
        card.buildButton.isEnabled = false
        
        // 提示用户
        Toast.makeText(this, "开始构建${displayName}，配置: 批次${config.batchSize}, 线程${config.numWorkers}, ${config.frequencyFilter.displayName}", Toast.LENGTH_LONG).show()
        
        // 保持屏幕常亮
        window.addFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
        
        // 开始构建
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                // 更新状态
                withContext(Dispatchers.Main) {
                    card.statusText.text = "状态: 正在构建..."
                    card.progressText.text = "准备中..."
                }
                
                Timber.d("开始构建${displayName}Trie树，配置: $config")
                
                // 构建Trie树
                addLog("${displayName} - 开始构建Trie树")
                val trie = trieBuilder.buildTrie(trieType, config) { progress, message ->
                    lifecycleScope.launch(Dispatchers.Main) {
                        card.progress.progress = progress
                        card.progressText.text = message
                    }
                    // 记录重要进度
                    if (progress % 20 == 0 || progress >= 95) {
                        addLog("${displayName} - 构建进度: ${progress}% - $message")
                    }
                }
                
                // 保存Trie树
                addLog("${displayName} - 开始保存Trie树到文件")
                val file = trieBuilder.saveTrie(trie, trieType)
                addLog("${displayName} - Trie树保存成功: ${file.absolutePath}, 大小: ${formatFileSize(file.length())}")
                
                // 自动尝试加载到内存
                addLog("${displayName} - 尝试自动加载到内存")
                val loadSuccess = trieManager.loadTrieToMemory(trieType)
                if (loadSuccess) {
                    addLog("${displayName} - 自动加载到内存成功")
                } else {
                    addLog("${displayName} - 自动加载到内存失败")
                }
                
                // 更新UI
                withContext(Dispatchers.Main) {
                    val lastModified = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
                        .format(Date(file.lastModified()))
                    val fileSize = formatFileSize(file.length())
                    
                    card.statusText.text = "状态: 构建完成"
                    card.fileInfo.text = "文件信息: $fileSize, 更新于 $lastModified"
                    Toast.makeText(this@TrieBuildActivity, "${displayName}构建成功", Toast.LENGTH_SHORT).show()
                    
                    // 记录构建成功日志
                    addLog("${displayName} - 构建完成! 文件大小: $fileSize")
                    
                    // 隐藏进度条
                    card.progress.visibility = View.INVISIBLE
                    card.progressText.visibility = View.INVISIBLE
                    
                    // 启用按钮
                    card.buildButton.isEnabled = true
                    card.exportButton.isEnabled = true
                    
                    // 更新内存加载状态
                    if (loadSuccess) {
                        updateTrieLoadStatus(trieType, true)
                        Toast.makeText(this@TrieBuildActivity, "${displayName}已自动加载到内存", Toast.LENGTH_SHORT).show()
                    }
                    
                    // 更新内存信息
                    updateMemoryInfo()
                    
                    // 刷新状态
                    refreshTrieStatus(trieType)
                    
                    window.clearFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
                }
                
            } catch (e: Exception) {
                Timber.e(e, "构建${displayName}Trie失败")
                addLog("${displayName} - 构建失败: ${e.message}")
                withContext(Dispatchers.Main) {
                    card.statusText.text = "状态: 构建失败"
                    card.progressText.text = "错误: ${e.message}"
                    Toast.makeText(this@TrieBuildActivity, "构建失败: ${e.message}", Toast.LENGTH_LONG).show()
                    
                    // 启用构建按钮
                    card.buildButton.isEnabled = true
                    
                    // 取消屏幕常亮
                    window.clearFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
                }
            }
        }
    }
    
    /**
     * 导出Trie树
     */
    private fun exportTrie(trieType: TrieBuilder.TrieType) {
        val displayName = getDisplayName(trieType)
        addLog("${displayName} - 开始导出Trie文件")
        
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val typeString = getTypeString(trieType)
                val sourceFile = File(filesDir, "trie/${typeString}_trie.dat")
                
                if (!sourceFile.exists()) {
                    withContext(Dispatchers.Main) {
                        Toast.makeText(this@TrieBuildActivity, "${displayName}文件不存在", Toast.LENGTH_SHORT).show()
                    }
                    return@launch
                }
                
                // 导出到下载目录
                val downloadsDir = File(android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_DOWNLOADS), "ShenjiTrie")
                downloadsDir.mkdirs()
                
                val exportFile = File(downloadsDir, "${typeString}_trie_${System.currentTimeMillis()}.dat")
                sourceFile.copyTo(exportFile, overwrite = true)
                
                withContext(Dispatchers.Main) {
                    addLog("${displayName} - 导出成功: ${exportFile.absolutePath}")
                    Toast.makeText(this@TrieBuildActivity, "${displayName}已导出到: ${exportFile.absolutePath}", Toast.LENGTH_LONG).show()
                    
                    // 复制路径到剪贴板
                    val clipboard = getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
                    val clip = ClipData.newPlainText("Trie导出路径", exportFile.absolutePath)
                    clipboard.setPrimaryClip(clip)
                }
                
            } catch (e: Exception) {
                Timber.e(e, "导出${displayName}失败")
                addLog("${displayName} - 导出失败: ${e.message}")
                withContext(Dispatchers.Main) {
                    Toast.makeText(this@TrieBuildActivity, "导出失败: ${e.message}", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
    
    /**
     * 加载Trie到内存
     */
    private fun loadTrieToMemory(trieType: TrieBuilder.TrieType) {
        val displayName = getDisplayName(trieType)
        addLog("${displayName} - 开始加载到内存")
        
        lifecycleScope.launch(Dispatchers.IO) {
            val success = trieManager.loadTrieToMemory(trieType)
            withContext(Dispatchers.Main) {
                if (success) {
                    addLog("${displayName} - 加载到内存成功")
                    Toast.makeText(this@TrieBuildActivity, "${displayName}加载成功", Toast.LENGTH_SHORT).show()
                    updateTrieLoadStatus(trieType, true)
                    updateMemoryInfo()
                } else {
                    addLog("${displayName} - 加载到内存失败")
                    Toast.makeText(this@TrieBuildActivity, "${displayName}加载失败", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
    
    /**
     * 卸载Trie
     */
    private fun unloadTrie(trieType: TrieBuilder.TrieType) {
        val displayName = getDisplayName(trieType)
        addLog("${displayName} - 开始卸载")
        
        trieManager.unloadTrie(trieType)
        addLog("${displayName} - 卸载完成")
        Toast.makeText(this, "${displayName}已卸载", Toast.LENGTH_SHORT).show()
        updateTrieLoadStatus(trieType, false)
        updateMemoryInfo()
    }
    
    /**
     * 测试Trie
     */
    private fun testTrie(trieType: TrieBuilder.TrieType) {
        val displayName = getDisplayName(trieType)
        
        // 显示测试输入对话框
        val input = EditText(this)
        input.hint = "输入拼音前缀进行测试"
        
        AlertDialog.Builder(this)
            .setTitle("测试${displayName}")
            .setView(input)
            .setPositiveButton("测试") { _, _ ->
                val query = input.text.toString().trim()
                if (query.isNotEmpty()) {
                    performTrieTest(trieType, query)
                }
            }
            .setNegativeButton("取消", null)
            .show()
    }
    
    /**
     * 执行Trie测试
     */
    private fun performTrieTest(trieType: TrieBuilder.TrieType, query: String) {
        val displayName = getDisplayName(trieType)
        
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val startTime = System.currentTimeMillis()
                val results = trieManager.searchByPrefix(trieType, query, 20)
                val endTime = System.currentTimeMillis()
                
                withContext(Dispatchers.Main) {
                    val resultText = if (results.isNotEmpty()) {
                        "查询'$query'找到${results.size}个结果 (${endTime - startTime}ms):\n\n" +
                        results.take(10).joinToString("\n") { "${it.word} (${it.frequency})" } +
                        if (results.size > 10) "\n\n... 还有${results.size - 10}个结果" else ""
                    } else {
                        "查询'$query'未找到结果 (${endTime - startTime}ms)"
                    }
                    
                    AlertDialog.Builder(this@TrieBuildActivity)
                        .setTitle("${displayName}测试结果")
                        .setMessage(resultText)
                        .setPositiveButton("确定", null)
                        .show()
                }
                
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    Toast.makeText(this@TrieBuildActivity, "测试失败: ${e.message}", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
    
    /**
     * 刷新所有状态
     */
    private fun refreshAllStatus() {
        // 更新预编译状态
        updatePrebuiltStatus()
        
        for (trieType in TrieBuilder.TrieType.values()) {
            refreshTrieStatus(trieType)
        }
        updateMemoryInfo()
    }
    
    /**
     * 刷新单个Trie状态
     */
    private fun refreshTrieStatus(trieType: TrieBuilder.TrieType) {
        val card = dictCards[trieType] ?: return
        val displayName = getDisplayName(trieType)
        
        try {
            if (trieManager.isTrieFileExists(trieType)) {
                val typeString = getTypeString(trieType)
                val file = File(filesDir, "trie/${typeString}_trie.dat")
                val lastModified = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
                    .format(Date(file.lastModified()))
                val fileSize = formatFileSize(file.length())
                
                card.statusText.text = "状态: 已构建"
                card.fileInfo.text = "文件信息: $fileSize, 更新于 $lastModified"
                card.exportButton.isEnabled = true
                card.loadButton.isEnabled = !trieManager.isTrieLoaded(trieType)
            } else {
                card.statusText.text = "状态: 未构建"
                card.fileInfo.text = "文件信息: 未构建"
                card.exportButton.isEnabled = false
                card.loadButton.isEnabled = false
            }
            
            // 更新内存加载状态
            updateTrieLoadStatus(trieType, trieManager.isTrieLoaded(trieType))
            
        } catch (e: Exception) {
            Timber.e(e, "刷新${displayName}状态失败")
            card.statusText.text = "状态: 检查失败"
            card.fileInfo.text = "文件信息: 检查失败"
        }
    }
    
    /**
     * 更新Trie加载状态
     */
    private fun updateTrieLoadStatus(trieType: TrieBuilder.TrieType, isLoaded: Boolean) {
        val card = dictCards[trieType] ?: return
        val displayName = getDisplayName(trieType)
        
        runOnUiThread {
            if (isLoaded) {
                card.loadedStatus.text = "内存状态: 已加载"
                card.loadedStatus.setTextColor(getColor(R.color.teal_700))
                
                // 更新统计信息
                val stats = trieManager.getTrieMemoryStats(trieType)
                if (stats != null) {
                    val statsText = "节点数: ${stats.nodeCount}, 词条数: ${stats.wordCount}, " +
                            "估计内存: ${formatFileSize(trieManager.getTrieMemoryUsage(trieType))}"
                    card.statsText.text = "统计信息: $statsText"
                } else {
                    card.statsText.text = "统计信息: 无数据"
                }
                
                card.loadButton.isEnabled = false
                card.unloadButton.isEnabled = true
                card.testButton.isEnabled = true
            } else {
                card.loadedStatus.text = "内存状态: 未加载"
                card.loadedStatus.setTextColor(getColor(android.R.color.holo_red_light))
                card.statsText.text = "统计信息: 未加载"
                
                card.loadButton.isEnabled = trieManager.isTrieFileExists(trieType)
                card.unloadButton.isEnabled = false
                card.testButton.isEnabled = false
            }
        }
    }
    
    /**
     * 更新内存信息
     */
    private fun updateMemoryInfo() {
        val runtime = Runtime.getRuntime()
        val maxMemory = runtime.maxMemory()
        val totalMemory = runtime.totalMemory()
        val freeMemory = runtime.freeMemory()
        val usedMemory = totalMemory - freeMemory
        
        val loadedTypes = trieManager.getLoadedTrieTypes()
        val loadedCount = loadedTypes.size
        val totalTrieMemory = loadedTypes.sumOf { trieManager.getTrieMemoryUsage(it) }
        
        val memoryInfo = """
            系统内存: ${formatFileSize(usedMemory)} / ${formatFileSize(maxMemory)}
            已加载Trie: $loadedCount 个
            Trie内存占用: ${formatFileSize(totalTrieMemory)}
            可用内存: ${formatFileSize(freeMemory)}
        """.trimIndent()
        
        memoryInfoText.text = memoryInfo
    }
    
    /**
     * 监听Trie加载状态变化
     */
    private fun observeTrieLoadingState() {
        // 这里可以添加状态监听逻辑
        // 目前通过手动刷新实现
    }
    
    /**
     * 获取显示名称
     */
    private fun getDisplayName(trieType: TrieBuilder.TrieType): String {
        return when (trieType) {
            TrieBuilder.TrieType.CHARS -> "单字词典"
            TrieBuilder.TrieType.BASE -> "基础词典"
            TrieBuilder.TrieType.CORRELATION -> "关联词典"
            TrieBuilder.TrieType.ASSOCIATIONAL -> "联想词典"
            TrieBuilder.TrieType.PLACE -> "地名词典"
            TrieBuilder.TrieType.PEOPLE -> "人名词典"
            TrieBuilder.TrieType.POETRY -> "诗词词典"
            TrieBuilder.TrieType.CORRECTIONS -> "纠错词典"
            TrieBuilder.TrieType.COMPATIBLE -> "兼容词典"
        }
    }
    
    /**
     * 获取描述
     */
    private fun getDescription(trieType: TrieBuilder.TrieType): String {
        return when (trieType) {
            TrieBuilder.TrieType.CHARS -> "单字和常用字符，用于单字输入"
            TrieBuilder.TrieType.BASE -> "常用词汇和短语，核心词典"
            TrieBuilder.TrieType.CORRELATION -> "相关词汇联想，提升输入体验"
            TrieBuilder.TrieType.ASSOCIATIONAL -> "词汇联想扩展，智能推荐"
            TrieBuilder.TrieType.PLACE -> "地理位置名称，地名输入"
            TrieBuilder.TrieType.PEOPLE -> "人物姓名，人名输入"
            TrieBuilder.TrieType.POETRY -> "古诗词内容，文学输入"
            TrieBuilder.TrieType.CORRECTIONS -> "拼写纠错，输入纠正"
            TrieBuilder.TrieType.COMPATIBLE -> "兼容性词汇，向下兼容"
        }
    }
    
    /**
     * 获取类型字符串
     */
    private fun getTypeString(trieType: TrieBuilder.TrieType): String {
        return when (trieType) {
            TrieBuilder.TrieType.CHARS -> "chars"
            TrieBuilder.TrieType.BASE -> "base"
            TrieBuilder.TrieType.CORRELATION -> "correlation"
            TrieBuilder.TrieType.ASSOCIATIONAL -> "associational"
            TrieBuilder.TrieType.PLACE -> "place"
            TrieBuilder.TrieType.PEOPLE -> "people"
            TrieBuilder.TrieType.POETRY -> "poetry"
            TrieBuilder.TrieType.CORRECTIONS -> "corrections"
            TrieBuilder.TrieType.COMPATIBLE -> "compatible"
        }
    }
    
    /**
     * 格式化文件大小
     */
    private fun formatFileSize(size: Long): String {
        if (size <= 0) return "0 B"
        val units = arrayOf("B", "KB", "MB", "GB", "TB")
        val digitGroups = (Math.log10(size.toDouble()) / Math.log10(1024.0)).toInt()
        return String.format("%.1f %s", size / Math.pow(1024.0, digitGroups.toDouble()), units[digitGroups])
    }
    
    override fun onDestroy() {
        super.onDestroy()
        // 取消屏幕常亮
        window.clearFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)
    }
    
    /**
     * 添加操作日志
     */
    private fun addLog(message: String) {
        val timestamp = SimpleDateFormat("HH:mm:ss.SSS", Locale.getDefault()).format(Date())
        val logEntry = "[$timestamp] $message"
        operationLogs.add(logEntry)
        Timber.d("TrieBuild: $logEntry")
        
        // 限制日志数量，避免内存溢出
        if (operationLogs.size > 1000) {
            operationLogs.removeAt(0)
        }
    }
    
    /**
     * 显示操作日志对话框
     */
    private fun showOperationLogs() {
        val logText = if (operationLogs.isEmpty()) {
            "暂无操作日志"
        } else {
            operationLogs.joinToString("\n")
        }
        
        // 创建可滚动的文本视图
        val scrollView = ScrollView(this)
        val textView = TextView(this).apply {
            text = logText
            textSize = 12f
            setPadding(32, 32, 32, 32)
            setTextIsSelectable(true)
            typeface = android.graphics.Typeface.MONOSPACE
        }
        scrollView.addView(textView)
        
        AlertDialog.Builder(this)
            .setTitle("操作日志 (${operationLogs.size}条)")
            .setView(scrollView)
            .setPositiveButton("复制全部") { _, _ ->
                copyLogsToClipboard()
            }
            .setNegativeButton("清空日志") { _, _ ->
                clearLogs()
            }
            .setNeutralButton("关闭", null)
            .show()
    }
    
    /**
     * 复制日志到剪贴板
     */
    private fun copyLogsToClipboard() {
        val logText = if (operationLogs.isEmpty()) {
            "暂无操作日志"
        } else {
            "=== 神迹AI键盘 - Trie构建日志 ===\n" +
            "导出时间: ${SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date())}\n" +
            "日志条数: ${operationLogs.size}\n\n" +
            operationLogs.joinToString("\n") +
            "\n\n=== 日志结束 ==="
        }
        
        val clipboard = getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
        val clip = ClipData.newPlainText("Trie构建日志", logText)
        clipboard.setPrimaryClip(clip)
        
        Toast.makeText(this, "日志已复制到剪贴板", Toast.LENGTH_SHORT).show()
        addLog("日志已复制到剪贴板 (${operationLogs.size}条)")
    }
    
    /**
     * 清空日志
     */
    private fun clearLogs() {
        val logCount = operationLogs.size
        operationLogs.clear()
        addLog("日志已清空 (原有${logCount}条)")
        Toast.makeText(this, "日志已清空", Toast.LENGTH_SHORT).show()
    }
    
    /**
     * 显示数据库诊断信息
     */
    private fun showDatabaseDiagnosis() {
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val repository = com.shenji.aikeyboard.data.DictionaryRepository()
                val diagnosis = StringBuilder()
                
                diagnosis.append("=== 数据库诊断报告 ===\n\n")
                
                // 检查所有词典类型
                val allTypes = repository.getAllDictionaryTypes()
                diagnosis.append("发现词典类型: ${allTypes.joinToString()}\n\n")
                
                for (type in allTypes) {
                    val count = repository.getEntryCountByType(type)
                    diagnosis.append("$type: $count 条词条\n")
                    
                    if (count > 0) {
                        // 获取前5条数据作为示例
                        val samples = repository.getEntriesByType(type, 0, 5)
                        diagnosis.append("  示例数据:\n")
                        samples.forEach { entry ->
                            diagnosis.append("    ${entry.word} -> ${entry.pinyin} (${entry.frequency})\n")
                        }
                    }
                    diagnosis.append("\n")
                }
                
                // 检查Trie文件状态
                diagnosis.append("=== Trie文件状态 ===\n")
                for (trieType in TrieBuilder.TrieType.values()) {
                    val exists = trieManager.isTrieFileExists(trieType)
                    val loaded = trieManager.isTrieLoaded(trieType)
                    val displayName = getDisplayName(trieType)
                    
                    diagnosis.append("$displayName: 文件存在=$exists, 已加载=$loaded")
                    
                    if (loaded) {
                        val stats = trieManager.getTrieMemoryStats(trieType)
                        diagnosis.append(", 统计=$stats")
                    }
                    diagnosis.append("\n")
                }
                
                withContext(Dispatchers.Main) {
                    val scrollView = ScrollView(this@TrieBuildActivity)
                    val textView = TextView(this@TrieBuildActivity).apply {
                        text = diagnosis.toString()
                        textSize = 12f
                        setPadding(32, 32, 32, 32)
                        setTextIsSelectable(true)
                        typeface = android.graphics.Typeface.MONOSPACE
                    }
                    scrollView.addView(textView)
                    
                    AlertDialog.Builder(this@TrieBuildActivity)
                        .setTitle("数据库诊断")
                        .setView(scrollView)
                        .setPositiveButton("复制") { _, _ ->
                            val clipboard = getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
                            val clip = ClipData.newPlainText("数据库诊断", diagnosis.toString())
                            clipboard.setPrimaryClip(clip)
                            Toast.makeText(this@TrieBuildActivity, "诊断信息已复制", Toast.LENGTH_SHORT).show()
                        }
                        .setNegativeButton("关闭", null)
                        .show()
                }
                
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    Toast.makeText(this@TrieBuildActivity, "诊断失败: ${e.message}", Toast.LENGTH_LONG).show()
                }
            }
        }
    }
    
    /**
     * 更新预编译状态显示
     */
    private fun updatePrebuiltStatus() {
        val statusBuilder = StringBuilder()
        
        // 添加系统内存信息
        val runtime = Runtime.getRuntime()
        val maxMemory = runtime.maxMemory()
        val totalMemory = runtime.totalMemory()
        val freeMemory = runtime.freeMemory()
        val usedMemory = totalMemory - freeMemory
        
        val loadedTypes = trieManager.getLoadedTrieTypes()
        val loadedCount = loadedTypes.size
        val totalTrieMemory = loadedTypes.sumOf { trieManager.getTrieMemoryUsage(it) }
        
        statusBuilder.append("系统内存: ${formatFileSize(usedMemory)} / ${formatFileSize(maxMemory)}\n")
        statusBuilder.append("已加载Trie: $loadedCount 个, 占用: ${formatFileSize(totalTrieMemory)}\n")
        statusBuilder.append("可用内存: ${formatFileSize(freeMemory)}\n\n")
        
        // 添加预编译词典状态
        statusBuilder.append("预编译词典状态:\n")
        for (trieType in TrieBuilder.TrieType.values()) {
            val displayName = getDisplayName(trieType)
            val hasPrebuilt = trieManager.hasPrebuiltTrie(trieType)
            val isLoaded = trieManager.isTrieLoaded(trieType)
            
            val prebuiltStatus = if (hasPrebuilt) "✓" else "✗"
            val loadedStatus = if (isLoaded) "✓" else "✗"
            
            statusBuilder.append("${displayName}: 预编译[$prebuiltStatus] 内存[$loadedStatus]\n")
        }
        prebuiltStatusText.text = statusBuilder.toString()
    }
} 